const Category = require("../models/categoryModel")

// T·∫°o category
exports.createCategory = async (req, res) => {
    try {
        const { name } = req.body;

        // 1. Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!name || name.trim() === "") {
            return res.status(400).json({ message: "T√™n category kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" });
        }

        // 2. T·∫°o m·ªõi category
        const newCategory = await Category.create({ name: name.trim() });

        // 3. Tr·∫£ v·ªÅ k√®m d·ªØ li·ªáu m·ªõi t·∫°o
        return res.status(201).json({
            message: "T·∫°o category th√†nh c√¥ng",
            data: newCategory
        });
    } catch (error) {
        console.error(error);

        // 4. B·∫Øt l·ªói tr√πng t√™n
        if (error.code === 11000) {
            return res.status(400).json({ message: "Category ƒë√£ t·ªìn t·∫°i" });
        }

        return res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// l·∫•y t·∫•t c·∫£ category
exports.getAllCategories = async(req,res) =>{
    try{
        let{page = 1, limit = 10} = req.query;
        page = parseInt(page);
        limit = parseInt(limit);
        const skip = (page - 1)* limit;

        const [categories, total] = await Promise.all([
            Category.find({})
                    .select("name createAt")
                    .sort({ createdAt: -1 })
                    .skip(skip)
                    .limit(limit),
            Category.countDocuments()
        ])

        return res.status(200).json({
            message: "L·∫•y danh s√°ch category th√†nh c√¥ng",
            data: {
                totalCategories: total,
                totalPages: Math.ceil(total / limit),
                currentPage: page,
                categories
            }
        });

    }catch(error){
        console.error(error);
        return res.status(500).json({message:"L·ªói server", error: error.message})
    }
}
// ch·ªânh s·ª≠a category
exports.updateCategory = async(req,res) =>{
    try{
        const{categoryId} = req.params;
        const {name} = req.body;
        const category = await Category.findByIdAndUpdate(
            categoryId,
            { name },          // üëà ·ªü ƒë√¢y ph·∫£i l√† object
            { new: true, runValidators: true } // new: tr·∫£ v·ªÅ b·∫£n ghi m·ªõi, runValidators: ch·∫°y validate schema
        );        
        if(!category){
            return res.status(404).json({message:"Kh√¥ng t√¨m th·∫•y category"})
        }
        res.status(200).json({ message: "C·∫≠p nh·∫≠t category th√†nh c√¥ng", data: category });
    }catch(error){
        if (error.code === 11000) {
            return res.status(400).json({ message: "T√™n category ƒë√£ t·ªìn t·∫°i" });
        }
        console.error(error)
        return res.status(500).json({message:"L·ªói server", error: error.message})
    }
}

exports.deleteCategory = async (req, res) => {
    try {
        const { categoryId } = req.params;
        const category = await Category.findByIdAndDelete(categoryId);
        if (!category) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y category ƒë·ªÉ x√≥a" });
        }
        res.status(200).json({ message: "X√≥a category th√†nh c√¥ng" });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};